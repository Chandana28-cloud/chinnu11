import java.util.*;
import java.io.*;

class Main 
{
    static class Node
    {
        char var;
        int count;
        Node left,right;
        Node(char ch, int c)
        {
            var = ch;
            count = c;
            left = right = null;
        }
    }
    static class comparator implements Comparator<Node> 
    {
        @Override 
        public int compare(Node node1, Node node2)
        {
            if(node1.count > node2.count)
                return 1;
            else 
                return 0;
        }
    }
    static void printCode(Node root, String str)
    {
        if(root.left == null && root.right == null && root.var != '-')
        {
            System.out.println(root.var + "=" + str);
            return;
        }
        printCode(root.left, str + "0");
        printCode(root.right, str + "1");
    }
    static void haffmanCoding(String str)
    {
        Map<Character, Integer> map = new HashMap<>();
        for(int i=0;i<str.length();i++)
        {
            if(map.containsKey(str.charAt(i)))
                map.replace(str.charAt(i), map.get(str.charAt(i))+1);
            else
                map.put(str.charAt(i), 1);
        }
        PriorityQueue<Node> queue = new PriorityQueue<>(new comparator());
        for(Map.Entry<Character, Integer> entry : map.entrySet())
        {
            Node n1 = new Node(entry.getKey(), entry.getValue());
            queue.add(n1);
        }
        Node root = null;
        while(queue.size() > 1)
        {
            Node n1 = queue.peek();
            queue.poll();
            Node n2 = queue.peek();
            queue.poll();
            int data = n1.count + n2.count;
            root = new Node('-', data);
            root.left = n1;
            root.right =n2;
            queue.add(root);
        }
        String s = "";
        printCode(root , s);
    }
    public static void main(String args[])
    {
        String str = "bccabbddaeccbbafddcc";
        haffmanCoding(str);
    }
}

output:
d=00                                                                                                                
e=010                                                                                                               
a=0110                                                                                                              
f=0111                                                                                                              
b=10                                                                                                                
c=11   