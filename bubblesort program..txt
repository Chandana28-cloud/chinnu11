// bubblesort is type of sorting technique.
// time complexity-->O(n2) in worst ,average.
//To decrease time complexity and to make adapative ,we use flag.. 
// when no swap occurs in first loop then,it exists from loop ,so in case of sorting order time complexity reduces and becomes adaptable.
// time complexity -->O(n) in best case.
// space complexity is-->O(1)
// it is inplace,stable,adaptable .
//n2/2 comparisions ,n2/2 swaps.

#include<stdio.h>
void bubblesort(int a[],int high);
void swap(int *a,int *b);
void printArray(int a[],int n);
// main funtion to called all the functions and getting elements
int main()
{
    int i,n,a[100];
    printf("enter no of elements");
    scanf("%d",&n);
    printf("enter elements");
    for(i=0;i<n;i++)
      scanf("%d",&a[i]);
    bubblesort(a,n); // function calling of bubble sort. 
    printArray(a,n);
      return 0;
}
// bubble sort function to get sorted elements.
void bubblesort(int a[],int high)
{
   for(int i=0;i<high;i++) // this loop makes to compare until gets sorted elements.
   {
       int flag=0;
       for(int j=0;j<high-i;j++) // this loop makes to compare adjacent elements.
       { 
          if(a[j+1]<a[j])  // it compares every element with next element.
          {
            flag=1;  // flag uses to observe whether swap occurs or not.
            swap(&a[j],&a[j+1]);
          }
       }
       if(flag==0)
         break;   // if swap is not done .it mean that it is in sorted order .so it exists from loop.
   }
}
// swap function.

void swap(int *a,int *b)
{
    int t=*a;
    *a=*b;
    *b=t;
}
// function to print sorted array elements.

void printArray(int a[],int n)
{
    printf("elements after sorted are : \n");
    for(int i=0;i<n;i++)
        printf("%d ",a[i]);
}

