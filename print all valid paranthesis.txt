import java.io.*;

public class PrintAllValidParanthesis
{
    public static void main(String args[])throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        PrintAllValidParanthesis pvp = new PrintAllValidParanthesis();
        String s = "";
        pvp.validParanthesis(n, s, 0, 0);
    }
    void validParanthesis(int n, String current_string, int open , int close)
    {
        if(current_string.length() == n)
        {
            System.out.println(current_string);
            return;
        }
        else
        {
            if(open < n/2)
                validParanthesis(n, current_string + "(", open+1, close);
            if(close < open)
                validParanthesis(n, current_string + ")", open, close+1);
        }
    }
}

//TEST CASES

input : 2
output: ()
input : 4
output: ()()
	(())
input : 6
output: ((()))                                                                                                                        
	(()())                                                                                                                        
	(())()                                                                                                                        
	()(())                                                                                                                        
	()()()  
input : 8
output: (((())))                                                                                                                      
	((()()))                                                                                                                      
	((())())                                                                                                                      
	((()))()                                                                                                                      
	(()(()))   
	(())()()                                                                                                                      
	()((()))                                                                                                                      
	()(()())                                                                                                                      
	()(())()                                                                                                                      
	()()(())                                                                                                                      
	()()()() 